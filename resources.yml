AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create an Amazon RDS MySQL cluster and a Fargate task.

Parameters:
  DB_USERNAME:
    Type: String
    Description: "usuario db"
  DB_PASSWORD:
    Type: String
    Description: "clave db"

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "rds-vpc"

  # Subnets
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: "rds-subnet1"

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      Tags:
        - Key: Name
          Value: "rds-subnet2"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "rds-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "rds-route-table"

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS MySQL cluster"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0 # Replace with a more restrictive CIDR for production

  # Subnet Group for RDS
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS MySQL cluster"
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2

  # RDS MySQL Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: "mysql-instance"
      Engine: "mysql"
      MasterUsername: !Ref DB_USERNAME
      MasterUserPassword: !Ref DB_PASSWORD # Update with a secure password
      DBName: "franchise"
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref SecurityGroup
      DBInstanceClass: db.t3.medium
      AllocatedStorage: 20
      StorageType: gp2
      MultiAZ: false
      #EngineVersion: "8.0"
      #PubliclyAccessible: false

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "FargateCluster"

  ##PUESTO
  ECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: 'franchise-repository'

  ##PUESTO
  ECSLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}-logs'
      RetentionInDays: 7

  #Definicion de tarea para ejecutar el contenedor Docker
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'my-task-family'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: 'my-container'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 8081
              HostPort: 8081
          LogConfiguration: #nuevo para el tema de cloudwatch
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs'
          Environment:
            - Name: DB_USERNAME
              Value: !Ref DB_USERNAME
            - Name: DB_PASSWORD
              Value: !Ref DB_PASSWORD
            - Name: DATABASE_URL
              Value: !Sub 'r2dbc:mysql://${DB_USERNAME}:${DB_PASSWORD}@${RDSInstance.Endpoint.Address}:${RDSInstance.Endpoint.Port}/franchise'

  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "ECSExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Balanceador de carga
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${AWS::StackName}-alb'
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2        
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing

  # Security Group para el Load Balancer
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP traffic to the ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          CidrIp: '0.0.0.0/0'

  # Target Group para ECS
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${AWS::StackName}-tg'
      VpcId: !Ref VPC
      Port: 8081
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /franchiseFunction
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # Listener para ALB
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8081
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref SecurityGroup
            - !Ref LoadBalancerSecurityGroup
      LoadBalancers:
        - ContainerName: 'my-container'
          ContainerPort: 8081
          TargetGroupArn: !Ref TargetGroup
    DependsOn:
      - Listener
      - RDSInstance

Outputs:
  RDSInstanceEndpoint:
    Description: "RDS MySQL endpoint"
    Value: !GetAtt [RDSInstance, Endpoint.Address]

  RDSInstancePort:
    Description: "Port for connecting to the RDS MySQL instance"
    Value: !GetAtt [RDSInstance, Endpoint.Port]

  ECRRepositoryUri:
    Description: 'ECR Repository URI'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'

#aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 009160068853.dkr.ecr.us-east-1.amazonaws.com
#sudo docker tag franchise-aws-cf:latest 009160068853.dkr.ecr.us-east-1.amazonaws.com/franchise-repository:latest
#sudo docker push 009160068853.dkr.ecr.us-east-1.amazonaws.com/franchise-repository:latest